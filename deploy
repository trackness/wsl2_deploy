#!/usr/bin/env bash

readonly GLOBAL_VOLUME=3
readonly SKIP_INSTALLED="Already installed, skipping."
readonly CODE_DIR="$HOME/code"
readonly BIN_DIR="$HOME/bin"

function wsl2_config() {
	sudo echo "${USER} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/"${USER}" > /dev/null 2>&1
	echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null # WSL2 DNS bug workaround: https://github.com/microsoft/WSL/issues/5256#issuecomment-711459592
	[ ! -d "$BIN_DIR" ] && mkdir "$BIN_DIR"
}

function grp_zrc() {
	grep -q "$1" "$HOME/.zshrc"
}

function log_and_exec() {
	local super=""
	local volume=1

	for arg in "$@"
	do
		case $arg in
			-su|--super)
				super="sudo "
				shift
				;;
			-q|--quiet)
				volume=-0
				shift
				;;
			-v|--verbose)
				volume=2
				shift
				;;
			-vv|--very-verbose)
				volume=3
				shift
				;;
		esac
	done

	if [[ $GLOBAL_VOLUME != "" ]]; then
		volume=$GLOBAL_VOLUME
	fi

    local message="${1}"
    local arr="$2"

	case $volume in
		0)
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null  2>&1
			else
				bash -c "$arr" > /dev/null 2>&1
			fi
			;;
		1)
			echo -n "### ${message}.. "
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null 2>&1
			else
				bash -c "$arr" > /dev/null 2>&1
			fi
			echo "Done."
			;;
		2)
			echo -n "### ${message}.. "
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null
			else
				bash -c "$arr" > /dev/null
			fi
			echo "Done."
			;;
		3)
			echo "### $message ###"
			if [[ $super ]]; then
				sudo bash -c "$arr"
			else
				bash -c "$arr"
			fi
			;;
	esac
}

function get_property {
	PROP_FILE=$1
	PROP_KEY=$2
	PROP_VALUE=$(grep "$PROP_KEY" "$PROP_FILE" | cut -d '=' -f2)
	shopt -s extglob
	output="${PROP_VALUE##*( )}"
	shopt -u extglob
	echo "$output"
}

function git_config() {
	log_and_exec "Setting Github name" "git config --global user.name $(get_property "/mnt/c/Users/James/.gitconfig" "name")"
	log_and_exec "Setting Github email" "git config --global user.email $(get_property "/mnt/c/Users/James/.gitconfig" "email")"
	log_and_exec "Setting Github credential manager" 'git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe"'
}

function update_distro() {
	log_and_exec -su "Updating package index" "apt-get update -y"
	log_and_exec -su "Upgrading packages" "apt-get dist-upgrade -y"
	# log_and_exec -su "Installing basic packages" "apt-get install git wget curl -y"
	log_and_exec -su "Removing unneccessary dependencies" "apt-get autoremove -y"
}

function install_zsh_omz_powerlevel10k() {
	function chk_zsh() {
		dpkg -s zsh &> /dev/null
	}

	function chk_omz() {
		[ -f "$HOME"/.oh-my-zsh/oh-my-zsh.sh ]
	}

	function chk_plk() {
		[ -d "$HOME/.oh-my-zsh/custom/themes/powerlevel10" ]
	}

	local msg="Installing ZSH"
	if chk_zsh; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		log_and_exec -su "$msg" "apt-get -y install zsh"
		log_and_exec -su "Changing default shell to ZSH" "chsh -s /usr/bin/zsh $USER"
	fi

	msg="Installing Oh-My-Zsh"
	if chk_omz; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		if ! chk_zsh; then
			echo "### $msg.. ZSH not installed, skipping."
			return
		fi
		log_and_exec "$msg" "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) \"\" --unattended"
		log_and_exec "Copying .zshrc config" "curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.zshrc -o $HOME/.zshrc"
		if ! grp_zrc "WSL2 DNS bug workaround"; then
			printf '\n%s' \
			'# WSL2 DNS bug workaround: https://github.com/microsoft/WSL/issues/5256#issuecomment-711459592' \
			'echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null' \
			'' >> "$HOME"/.zshrc
		fi
		printf '\n%s' \
		'# Aliases' \
		'alias zshconfig="code ~/.zshrc"' \
		'alias ohmyzsh="code ~/.oh-my-zsh"' \
		'' >> "$HOME"/.zshrc
	fi

	msg="Installing Powerlevl10k"
	if chk_plk; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		if ! chk_omz; then
			echo "### $msg.. Oh-My-Zsh not installed, skipping."
			return
		else
			log_and_exec "$msg" "git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10"
			log_and_exec "Copying .p10k.zsh config" "curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.p10k.zsh -o $HOME/.p10k.zsh"
			if ! grp_zrc "Enable Powerlevel10k instant prompt"; then			
				sed -i '1s|^|# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.\n|' "$HOME"/.zshrc
				sed -i '2s|^|# Initialization code that may require console input (password prompts, [y/n]\n|' "$HOME"/.zshrc
				sed -i '3s|^|# confirmations, etc.) must go above this block; everything else may go below.\n|' "$HOME"/.zshrc
				sed -i '4s|^|if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then\n|' "$HOME"/.zshrc
				sed -i '5s|^|\tsource "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"\n|' "$HOME"/.zshrc
				sed -i '6s|^|fi\n\n|' "$HOME"/.zshrc
			fi
			if ! grp_zrc "powerlevel10k/powerlevel10k"; then
				sed -i 's/ZSH_THEME="robbyrussell"/# ZSH_THEME="robbyrussell"/' "$HOME"/.zshrc # deactivate but preserve robyrussell theme
				sed -i 's/# ZSH_THEME="robbyrussell"/&\nZSH_THEME="powerlevel10k\/powerlevel10k"/' "$HOME"/.zshrc # add powerline theme
			fi
			if ! grp_zrc ".p10k.zsh"; then
				printf '\n%s' \
				'# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.' \
				'[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh' \
				'' >> "$HOME"/.zshrc
			fi
		fi
	fi
}

function install_go() {
	local msg="Installing Go"
	if dpkg -s golang-go &> /dev/null; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		[[ ! -d "$HOME"/go ]] && mkdir "$HOME"/go
		if ! grp_zrc '# go'; then
			printf '\n%s' \
			'# go' \
			'export GOPATH=\"$HOME/go"' \
			'export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"' \
			'' >> "$HOME"/.zshrc
		fi
		log_and_exec -su "$msg" "apt-get -y install golang-go"
	fi
}

function install_tfswitch_terraform() {
	local tf_ver=$1

	chk_tfs() {
		[ -f "$HOME/bin/tfswitch" ]
	}

	chk_tfv() {
		true
	}

	local msg="Installing tfswitch"
	if chk_tfs; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		# might need to re-add -su here
		log_and_exec "Downloading tfswitch" "curl -fsSL https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh -O"
		chmod 755 install.sh
		log_and_exec "$msg" "./install.sh -b $BIN_DIR"
		rm install.sh
		# log_and_exec "Moving tfswitch install script to ~/.poetry" "mv get-poetry.py $BIN_DIR/"
	fi

	msg="Installing Terraform"
	if [ -n "$tf_ver" ]; then
		if chk_tfs; then
			# if chk_tfv; then
			# might need to re-add -su here
			# log_and_exec "$msg $tf_ver" "tfswitch $tf_ver"
			echo "### $msg Placeholder pending version checker"
			# fi
		else
			echo "### $msg.. tfswitch not installed, skipping."
		fi
	fi
}

function chk_pyt() {
	if [ -d "$HOME/.pyenv/version" ]; then
		grep -q "$1" "$HOME/.pyenv/version"
	else
		false
	fi
}

function install_pyenv_python() {
	local pyt_ver=$1

	chk_pyv() {
		[ -f "$HOME"/.pyenv/bin/pyenv ]
	}

	local msg="Installing PyEnv dependencies"
	if chk_pyv; then
		echo "### $msg... $SKIP_INSTALLED"
	else
		log_and_exec -su "$msg" "apt-get -y install --no-install-recommends " \
		"make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev " \
		"libncurses5-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev"
	fi

	msg="Installing PyEnv"
	if chk_pyv; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		export PATH="$HOME/.pyenv/bin:$PATH" # temporary to enable pyenv use within deploy
		log_and_exec "Installing pyenv" "$(curl -fsSL https://pyenv.run)"
		if ! grp_zrc "# pyenv"; then
			printf '\n%s' \
			'# pyenv' \
			'export PATH=$HOME/.pyenv/bin:$PATH' \
			'eval "$(pyenv init -)"' \
			'eval "$(pyenv virtualenv-init -)"' \
			'' >> "$HOME"/.zshrc
		fi
	fi

	msg="Installing Python"
	if [ -n "$pyt_ver" ]; then
		if chk_pyv; then
			if chk_pyt "$pyt_ver"; then
				echo "### $msg $1.. $SKIP_INSTALLED"
			else
				log_and_exec "$msg $pyt_ver" "pyenv install $pyt_ver"
				log_and_exec "Setting global python to $pyt_ver" "pyenv global $pyt_ver"
			fi
		else
			echo "### $msg.. PyEnv not installed, skipping."
		fi
	fi
}

function install_poetry() {
	chk_poe() {
		[[ -d "$HOME"/.poetry ]]
	}

	local msg="Installing Poetry"
	if chk_poe; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		if chk_pyt "$1"; then
			log_and_exec "Downloading Poetry" "curl -fsSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -O"
			log_and_exec "$msg" "python get-poetry.py -y"
			log_and_exec "Moving Poetry install script to ~/.poetry" "mv get-poetry.py $HOME/.poetry"
		fi
	fi
}

function git_clone_all() {
	[ ! -d "$CODE_DIR" ] && mkdir "$CODE_DIR"
	local repos=("${@}")
	for i in "${repos[@]}"
	do
		local cmd=true
		local repo
		repo=$(echo "$i" | cut -d "/" -f 2)
		[ ! -d "$CODE_DIR/$repo" ] && cmd="git clone https://github.com/$i.git $CODE_DIR/$repo --quiet"
		log_and_exec "Cloning repo to $CODE_DIR/$repo" "$cmd"
	done
}

github_repos=(
	"trackness/wsl2_deploy"
	"trackness/sentinel"
	"trackness/splitwiser"
	"getndazn/dazn-cli"
	"getndazn/sre-grafana"
)

wsl2_config								# done
git_config								# done
update_distro							# done
install_zsh_omz_powerlevel10k			# done
install_go								# done
install_tfswitch_terraform "0.13.5"		# tf version check
install_pyenv_python "3.9.0"			# done
install_poetry "3.9.0"					# done
git_clone_all "${github_repos[@]}"

# code .
# exec zsh
