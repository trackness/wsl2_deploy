#!/usr/bin/env bash

readonly GLOBAL_VOLUME=""
readonly SKIP_INSTALLED="Already done, skipping."
readonly SKIP_REQUIREMENTS="Requirements not met, skipping."
readonly CODE_DIR="$HOME/code"
readonly BIN_DIR="$HOME/bin"
readonly GO_DIR="$HOME/go"

function wsl2_config() {
	[ ! -f "/etc/sudoers.d/$USER" ] && sudo echo "${USER} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/"${USER}" > /dev/null 2>&1
		# WSL2 DNS bug workaround: https://github.com/microsoft/WSL/issues/5256#issuecomment-711459592
	! grep -q "nameserver 8.8.8.8" /etc/resolv.conf && echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null
	[ ! -d "$BIN_DIR" ] && mkdir "$BIN_DIR"
	[ ! -d "$CODE_DIR" ] && mkdir "$CODE_DIR"
	[ ! -d "$GO_DIR" ] && mkdir "$GO_DIR"

}

function grep_in_zshrc() {
	[ -f "$HOME/.zshrc" ] && grep -q "$1" "$HOME/.zshrc"
}

function log_and_exec() {
	local super=""
	local volume=1

	for arg in "$@"
	do
		case $arg in
			-su|--super)
				super="sudo "
				shift
				;;
			-q|--quiet)
				volume=-0
				shift
				;;
			-v|--verbose)
				volume=2
				shift
				;;
			-vv|--very-verbose)
				volume=3
				shift
				;;
		esac
	done

	if [[ $GLOBAL_VOLUME != "" ]]; then
		volume=$GLOBAL_VOLUME
	fi

    local message="${1}"
    local arr="$2"

	case $volume in
		0)
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null  2>&1
			else
				bash -c "$arr" > /dev/null 2>&1
			fi
			;;
		1)
			echo -n "### ${message}.. "
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null 2>&1
			else
				bash -c "$arr" > /dev/null 2>&1
			fi
			echo "Done."
			;;
		2)
			echo -n "### ${message}.. "
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null
			else
				bash -c "$arr" > /dev/null
			fi
			echo "Done."
			;;
		3)
			echo "### $message ###"
			if [[ $super ]]; then
				sudo bash -c "$arr"
			else
				bash -c "$arr"
			fi
			;;
	esac
}

function git_config() {
	function local_gitconfig_property_is_empty() {
		[ "$(git config --global "$1")" == "" ]
	}

	function get_remote_gitconfig_property() {
		PROP_FILE=$1
		PROP_KEY=$2
		PROP_VALUE=$(grep "$PROP_KEY" "$PROP_FILE" | cut -d '=' -f2)
		shopt -s extglob
		output="${PROP_VALUE##*( )}"
		shopt -u extglob
		echo "$output"
	}

	local property

	if local_gitconfig_property_is_empty "user.name"; then
		property=$(get_remote_gitconfig_property "/mnt/c/Users/James/.gitconfig" "name")
		log_and_exec "Setting Github name" "git config --global user.name $property"
	fi
	if local_gitconfig_property_is_empty "user.email"; then
		property=$(get_remote_gitconfig_property "/mnt/c/Users/James/.gitconfig" "email")
		log_and_exec "Setting Github email" "git config --global user.email $property"
	fi
	if local_gitconfig_property_is_empty "credential.helper"; then
		property='"/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe"'
		log_and_exec "Setting Github credential manager" "git config --global credential.helper $property"
	fi
}

function update_distro() {
	log_and_exec -su "Updating package index" "apt-get update -y"
	log_and_exec -su "Upgrading packages" "apt-get dist-upgrade -y"
	log_and_exec -su "Installing basic packages" "apt-get install git wget curl -y"
	log_and_exec -su "Removing unneccessary dependencies" "apt-get autoremove -y"
}

function install_zsh_omz_powerlevel10k() {
	function zsh_is_installed() {
		dpkg -s zsh &> /dev/null
	}

	function oh_my_zsh_is_installed() {
		[ -f "$HOME/.oh-my-zsh/oh-my-zsh.sh" ]
	}

	function powerlevel10k_is_installed() {
		[ -d "$HOME/.oh-my-zsh/custom/themes/powerlevel10k" ]
	}

	function zshrc_is_present() {
		[ -f "$HOME/.zshrc" ]
	}

	function p10k_is_present() {
		[ -f "$HOME/.p10k.zsh" ]
	}

	function default_shell_is_zsh() {
		[ "$(awk -F: -v user="$USER" '{if ($1 == user) {print $7}}' /etc/passwd)" == "/usr/bin/zsh" ]
	}

	local msg

	msg="Installing .p10k.zsh config"
	if ! p10k_is_present; then
		log_and_exec "$msg" "curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.p10k.zsh -o $HOME/.p10k.zsh"
	else
		echo "$msg.. $SKIP_INSTALLED"
	fi

	msg="Installing ZSH"
	if ! zsh_is_installed; then
		log_and_exec -su "$msg" "apt-get -y install zsh"
	else
		echo "$msg.. $SKIP_INSTALLED"
	fi

	msg="Installing Oh-My-Zsh"
	if ! oh_my_zsh_is_installed; then
		if zsh_is_installed; then
			log_and_exec "$msg" "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) \"\" --unattended"
		else
			echo "$msg.. $SKIP_REQUIREMENTS"
		fi
	else
		echo "$msg.. $SKIP_INSTALLED"
	fi

	# Consider removing default OMZ lines and readding upon OMZ install
	msg="Installing simplified .zshrc config"
	if ! grep_in_zshrc "# Simplified .zshrc"; then
		if oh_my_zsh_is_installed; then
			log_and_exec "$msg" "curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.zshrc -o $HOME/.zshrc"
		else
			echo "$msg.. $SKIP_REQUIREMENTS"
		fi
	else
		echo "$msg.. $SKIP_INSTALLED"
	fi

	# consider moving to end with full checks
	msg="Changing default shell to ZSH"
	if ! default_shell_is_zsh; then
		if zsh_is_installed && oh_my_zsh_is_installed && zshrc_is_present; then
			log_and_exec -su "$msg" "chsh -s /usr/bin/zsh $USER"
		else
			echo "$msg.. $SKIP_REQUIREMENTS"
		fi
	else
		echo "$msg.. $SKIP_INSTALLED"
	fi

	echo -n "Adding WSL2 DNS workaround to .zshrc.. "
	if ! grep_in_zshrc "WSL2 DNS bug workaround"; then
		if zshrc_is_present; then
			printf '\n%s' \
			'# WSL2 DNS bug workaround: https://github.com/microsoft/WSL/issues/5256#issuecomment-711459592' \
			'echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null' \
			'' >> "$HOME"/.zshrc
			echo "Done."
		else
			echo "$SKIP_REQUIREMENTS"
		fi
	else
		echo "$SKIP_INSTALLED"
	fi

	msg="Adding ZSH config aliases to .zshrc"
	echo -n "$msg.. "
	if ! grep_in_zshrc "# ZSH Aliases"; then
		if zshrc_is_present; then
			printf '\n%s' \
			'# ZSH Aliases' \
			'alias zshconfig="code ~/.zshrc"' \
			'alias ohmyzsh="code ~/.oh-my-zsh"' \
			'' >> "$HOME"/.zshrc
			echo "Done."
		else
			echo "$SKIP_REQUIREMENTS"
		fi
	else
		echo "$SKIP_INSTALLED"
	fi

	function install_powelevel10k() {
		echo -n "Installing Powerlevl10k.. "
		if powerlevel10k_is_installed; then
			echo "$SKIP_INSTALLED"
			return
		fi
		if ! oh_my_zsh_is_installed; then
			echo "Oh-My-Zsh not installed"
			return
		fi
		git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k" --quiet
		echo "Done."
	}

	function source_p10k_zsh_in_zsrc() {
		echo -n "Sourcing .p10k.zsh in .zshrc.. "
		if grep_in_zshrc ".p10k.zsh"; then
			echo "$SKIP_INSTALLED"
			return
		fi
		if ! powerlevel10k_is_installed; then
			echo "Powerlevel10k theme not installed"
			return
		fi
		if ! p10k_is_present; then
			echo ".p10k.zsh config file not present"
			return
		fi
		printf '\n%s' \
		"# To customize prompt, run 'p10k configure' or edit ~/.p10k.zsh." \
		'[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh' \
		'' >> "$HOME"/.zshrc
		echo "Done."
	}

	function enable_p10k_instant_prompt() {
		echo -n "Enabling Powerlevel10k instant prompt.. "
		if grep_in_zshrc "# Enable Powerlevel10k instant prompt"; then 
			echo "$SKIP_INSTALLED"
			return 
		fi
		if ! powerlevel10k_is_installed; then
			echo "Powerlevel10k theme not installed"
			return 
		fi
		if ! p10k_is_present; then
			echo ".p10k.zsh config file not present"
			return
		fi
		if ! grep_in_zshrc ".p10k.zsh"; then
			echo ".p10k.zsh not sourced in .zshrc"
			return
		fi
		sed -i '2s|^|# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.\n|' "$HOME/.zshrc"
		sed -i '3s|^|# Initialization code that may require console input (password prompts, [y/n]\n|' "$HOME/.zshrc"
		sed -i '4s|^|# confirmations, etc.) must go above this block; everything else may go below.\n|' "$HOME/.zshrc"
		sed -i '5s|^|if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then\n|' "$HOME/.zshrc"
		sed -i '6s|^|\tsource "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"\n|' "$HOME/.zshrc"
		sed -i '7s|^|fi\n\n|' "$HOME/.zshrc"
		echo "Done."
	}

	function set_p10k_theme() {
		echo -n "Setting theme to Powerlevel10k.. "
		if grep_in_zshrc "powerlevel10k/powerlevel10k"; then 
			echo "$SKIP_INSTALLED"
			return 
		fi
		if ! powerlevel10k_is_installed; then
			echo "Powerlevel10k theme not installed"
			return 
		fi
		if ! grep_in_zshrc ".p10k.zsh"; then
			echo ".p10k.zsh not sourced in .zshrc"
			return
		fi
		if ! p10k_is_present; then
			echo ".p10k.zsh config file not present"
			return
		fi
		sed -i 's/ZSH_THEME="robbyrussell"/# ZSH_THEME="robbyrussell"/' "$HOME"/.zshrc # deactivate but preserve robyrussell theme
		sed -i 's/# ZSH_THEME="robbyrussell"/&\nZSH_THEME="powerlevel10k\/powerlevel10k"/' "$HOME"/.zshrc # add powerline theme
		echo "Done."
	}

	install_powelevel10k
	source_p10k_zsh_in_zsrc
	enable_p10k_instant_prompt
	set_p10k_theme
}

function install_go() {
	function go_is_installed() {
		dpkg -s golang-go &> /dev/null
	}

	local msg="Installing Go"
	if ! go_is_installed; then
		log_and_exec -su "$msg" "apt-get -y install golang-go"
	else
		echo "### $msg.. $SKIP_INSTALLED"
	fi

	echo -n "Setting Go environment variables.. "
	if ! grep_in_zshrc '# go'; then
		if go_is_installed; then
			printf '\n%s' \
			'# go' \
			'export GOPATH="$HOME/go"' \
			'export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"' \
			'' >> "$HOME/.zshrc"
			echo "Done."
		else
			echo "$SKIP_REQUIREMENTS"
		fi
	else
		echo "$SKIP_INSTALLED"
	fi


}

function install_tfswitch_terraform() {
	local tf_ver=$1

	chk_tfs() {
		[ -f "$HOME/bin/tfswitch" ]
	}

	chk_tfv() {
		true
	}

	local msg="Installing tfswitch"
	if chk_tfs; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		# might need to re-add -su here
		log_and_exec "Downloading tfswitch" "curl -fsSL https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh -O"
		chmod 755 install.sh
		log_and_exec "$msg" "./install.sh -b $BIN_DIR"
		rm install.sh
		# log_and_exec "Moving tfswitch install script to ~/.poetry" "mv get-poetry.py $BIN_DIR/"
	fi

	msg="Installing Terraform"
	if [ -n "$tf_ver" ]; then
		if chk_tfs; then
			# if chk_tfv; then
			# might need to re-add -su here
			# log_and_exec "$msg $tf_ver" "tfswitch $tf_ver"
			echo "### $msg Placeholder pending version checker"
			# fi
		else
			echo "### $msg.. tfswitch not installed, skipping."
		fi
	fi
}

function chk_pyt() {
	if [ -d "$HOME/.pyenv/version" ]; then
		grep -q "$1" "$HOME/.pyenv/version"
	else
		false
	fi
}

function install_pyenv_python() {
	local pyt_ver=$1

	chk_pyv() {
		[ -f "$HOME"/.pyenv/bin/pyenv ]
	}

	local msg="Installing PyEnv dependencies"
	if ! chk_pyv; then
		echo "### $msg... $SKIP_INSTALLED"
	else
		log_and_exec -su "$msg" "apt-get -y install --no-install-recommends " \
		"make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev " \
		"libncurses5-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev"
	fi

	msg="Installing PyEnv"
	if chk_pyv; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		export PATH="$HOME/.pyenv/bin:$PATH" # temporary to enable pyenv use within deploy
		log_and_exec "Installing pyenv" "$(curl -fsSL https://pyenv.run)"
		if ! grep_in_zshrc "# pyenv"; then
			printf '\n%s' \
			'# pyenv' \
			'export PATH=$HOME/.pyenv/bin:$PATH' \
			'eval "$(pyenv init -)"' \
			'eval "$(pyenv virtualenv-init -)"' \
			'' >> "$HOME"/.zshrc
		fi
		eval "$(pyenv init -)"
		eval "$(pyenv virtualenv-init -)"
	fi

	msg="Installing Python"
	if [ -n "$pyt_ver" ]; then
		if chk_pyv; then
			if chk_pyt "$pyt_ver"; then
				echo "### $msg $1.. $SKIP_INSTALLED"
			else
				log_and_exec "$msg $pyt_ver" "pyenv install $pyt_ver"
				log_and_exec "Setting global python to $pyt_ver" "pyenv global $pyt_ver"
			fi
		else
			echo "### $msg.. PyEnv not installed, skipping."
		fi
	fi
}

function install_poetry() {
	chk_poe() {
		[[ -d "$HOME"/.poetry ]]
	}

	local msg="Installing Poetry"
	if chk_poe; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		if chk_pyt "$1"; then
			log_and_exec "Downloading Poetry" "curl -fsSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -O"
			log_and_exec "$msg" "python get-poetry.py -y"
			log_and_exec "Moving Poetry install script to ~/.poetry" "mv get-poetry.py $HOME/.poetry"
		fi
	fi
}

function git_clone_all() {
	local repos=("${@}")
	local repo
	local msg
	for i in "${repos[@]}"
	do
		msg="Cloning repo to $CODE_DIR/$repo"
		repo=$(echo "$i" | cut -d "/" -f 2)
		if [ ! -d "$CODE_DIR/$repo" ]; then
			log_and_exec "$msg" "git clone https://github.com/$i.git $CODE_DIR/$repo --quiet"
		else
			echo "$msg.. Repo already exists, skipping."
		fi
	done
}

github_repos=(
	"trackness/wsl2_deploy"
	# "trackness/sentinel"
	# "trackness/splitwiser"
	# "getndazn/dazn-cli"
	# "getndazn/sre-grafana"
)

wsl2_config								# check state of modified setup files, only do if not yet done
git_config								# functionality done, needs removal of log_and_exec
update_distro							# done
install_zsh_omz_powerlevel10k			# done
# install_go								# done
# install_tfswitch_terraform "0.13.5"		# tf version check
# install_pyenv_python "3.9.0"			# python wont install	
# install_poetry "3.9.0"					# check after python works
git_clone_all "${github_repos[@]}"

# code .
# exec zsh
