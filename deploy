#!/usr/bin/env bash

readonly global_volume=""
readonly SKIP_INSTALLED="Already installed, skipping."
readonly code_dir="$HOME/code"

function wsl2_config() {
	sudo echo "${USER} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/"${USER}" > /dev/null 2>&1
	echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null # WSL2 DNS bug workaround: https://github.com/microsoft/WSL/issues/5256#issuecomment-711459592
}

function log_and_exec() {
	local super=""
	local volume=1

	for arg in "$@"
	do
		case $arg in
			-su|--super)
				super="sudo "
				shift
				;;
			-q|--quiet)
				volume=-0
				shift
				;;
			-v|--verbose)
				volume=2
				shift
				;;
			-vv|--very-verbose)
				volume=3
				shift
				;;
		esac
	done

	if [[ $global_volume != "" ]]; then
		volume=$global_volume
	fi

    local message="${1}"
    local arr="$2"

	case $volume in
		0)
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null  2>&1
			else
				bash -c "$arr" > /dev/null 2>&1
			fi
			;;
		1)
			echo -n "### ${message}.. "
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null 2>&1
			else
				bash -c "$arr" > /dev/null 2>&1
			fi
			echo "Done."
			;;
		2)
			echo -n "### ${message}.. "
			if [[ $super ]]; then
				sudo bash -c "$arr" > /dev/null
			else
				bash -c "$arr" > /dev/null
			fi
			echo "Done."
			;;
		3)
			echo "### $message ###"
			if [[ $super ]]; then
				sudo bash -c "$arr"
			else
				bash -c "$arr"
			fi
			;;
	esac
}

function get_property {
	PROP_FILE=$1
	PROP_KEY=$2
	PROP_VALUE=$(grep "$PROP_KEY" "$PROP_FILE" | cut -d '=' -f2)
	shopt -s extglob
	output="${PROP_VALUE##*( )}"
	shopt -u extglob
	echo "$output"
}

function git_config() {
	log_and_exec "Setting Github name" "git config --global user.name $(get_property "/mnt/c/Users/James/.gitconfig" "name")"
	log_and_exec "Setting Github email" "git config --global user.email $(get_property "/mnt/c/Users/James/.gitconfig" "email")"
	log_and_exec "Setting Github credential manager" 'git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe"'
}

function update_distro() {
	log_and_exec -su "Updating package index" "apt-get update -y"
	log_and_exec -su "Upgrading packages" "apt-get dist-upgrade -y"
	log_and_exec -su "Installing basic packages" "apt-get install git wget curl -y"
	log_and_exec -su "Removing unneccessary dependencies" "apt-get autoremove"
}

function install_zsh_omz_powerlevel10k() {
	function chk_zsh() {
		dpkg -s zsh &> /dev/null
	}

	function chk_omz() {
		[ -f "$HOME"/.oh-my-zsh/oh-my-zsh.sh ]
	}

	function chk_plk() {
		[ -d "$HOME"/.oh-my-zsh/custom/themes/powerlevel10 ]
	}

	local msg="Installing ZSH"
	if chk_zsh; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		log_and_exec -su "$msg" "apt-get -y install zsh"
		log_and_exec -su "Changing default shell to ZSH" "chsh -s /usr/bin/zsh $USER"
	fi

	msg="Installing Oh-My-Zsh"
	if chk_omz; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		if ! chk_zsh; then
			echo "### $msg.. ZSH not installed, skipping."
			return
		fi
		log_and_exec "$msg" "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) \"\" --unattended"
		log_and_exec "Copying .zshrc config" "curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.zshrc -o $HOME/.zshrc"
	fi

	msg="Installing Powerlevl10k"
	if chk_plk; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		if ! chk_omz; then
			echo "### $msg.. Oh-My-Zsh not installed, skipping."
			return
		fi
		if ! chk_zsh; then
			echo "### $msg.. ZSH not installed, skipping."
			return
		fi
		log_and_exec "$msg" "git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10"
		log_and_exec "Copying .p10k.zsh config" "curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.p10k.zsh -o $HOME/.p10k.zsh"
		# TODO : update .zshrc theme here
		# TODO : add [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh to .zshrc
	fi
}

function install_go() {
	local msg="Installing Go"
	if dpkg -s golang-go &> /dev/null; then
		echo "### $msg.. $SKIP_INSTALLED"
	else
		log_and_exec -su "$msg" "apt-get -y install golang-go"
		# TODO : add gopath and gobin exports to .zshrc
	fi
}

function install_tfswitch_terraform() {
	local msg="Installing Go"
	# TODO : check for existing installation
	log_and_exec -su "Installing tfswitch" "$(curl -fsSL https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh)"
	if [ -z ${1+x} ]; then
		log_and_exec -su "Setting terraform version" "tfswitch $1"
	fi
}

function install_dev_tools() {
	# log_and_exec -su "Installing pyenv dependencies" "apt-get -y install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev"
	export PATH="$HOME"/.pyenv/bin:"$PATH"
	log_and_exec "Installing pyenv" "$(curl -fsSL https://pyenv.run)"
	# eval $(pyenv init -)
	# eval $(pyenv virtualenv-init -)
	log_and_exec "Installing python 3.9.0" "pyenv install 3.9.0"
	log_and_exec "Setting global python to 3.9.0" "pyenv global 3.9.0"

	# _poetry_download=(curl -fsSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -O)
	# log_and_exec "Downloading Poetry" "curl -fsSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -O"
	# _poetry_install=(python get-poetry.py -y)
	# log_and_exec "Installing Poetry" "python get-poetry.py -y"
	# _poetry_clean=(mv get-poetry.py "$HOME"/.poetry)
	# log_and_exec "Moving Poetry install script to ~/.poetry" "mv get-poetry.py $HOME/.poetry"
}

function git_clone_all() {
	[ ! -d "$code_dir" ] && mkdir "$code_dir"
	local repos=("${@}")
	for i in "${repos[@]}"
	do
		local cmd=true
		local repo
		repo=$(echo "$i" | cut -d "/" -f 2)
		[ ! -d "$code_dir/$repo" ] && cmd="git clone https://github.com/$i.git $code_dir/$repo --quiet"
		log_and_exec "Cloning repo to $code_dir/$repo" "$cmd"
	done
}

github_repos=(
	"trackness/wsl2_deploy"
	"trackness/sentinel"
	"trackness/splitwiser"
	"getndazn/dazn-cli"
	"getndazn/sre-grafana"
)

wsl2_config
git_config
update_distro
install_zsh_omz_powerlevel10k
install_go
# install_tfswitch_terraform 0_13_5
# install_pyenv_python 3_9_0
# install_poetry
git_clone_all "${github_repos[@]}"

# code .
# exec zsh
