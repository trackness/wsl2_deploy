#!/usr/bin/env bash

function log_and_exec() {
	local super=""
	local volume=1

	for arg in "$@"
	do
		case $arg in
			-su|--super)
				super="sudo "
				shift
				;;
			-q|--quiet)
				volume=-0
				shift
				;;
			-l|--loud)
				volume=2
				shift
				;;
		esac
	done

    local message="${1}"
    shift
    local arr=("${@}")

	case $volume in
		0)
			if [[ $super ]]; then
				sudo "${arr[@]}" > /dev/null
			else
				"${arr[@]}" > /dev/null
			fi
			;;
		1)
			echo -n "${message}.. "
			if [[ $super ]]; then
				sudo "${arr[@]}" > /dev/null
			else
				"${arr[@]}" > /dev/null
			fi
			echo "Done."
			;;
		2)
			echo "### ${message} ###"
			if [[ $super ]]; then
				sudo "${arr[@]}"
			else
				"${arr[@]}"
			fi
			;;
	esac
}

function get_property {
	PROP_FILE=${1}
	PROP_KEY=${2}
	PROP_VALUE=$(cat "$PROP_FILE" | grep "$PROP_KEY" | cut -d '=' -f2)
	shopt -s extglob
	output="${PROP_VALUE##*( )}"
	shopt -u extglob
	echo "$output"
}

function git_config() {
	_git_name=(git config --global user.name "$(get_property "/mnt/c/Users/James/.gitconfig" "name")")
	log_and_exec "Setting Github name" "${_git_name[@]}"
	_git_email=(git config --global user.email "$(get_property "/mnt/c/Users/James/.gitconfig" "email")")
	log_and_exec "Setting Github email" "${_git_email[@]}"
	_git_credential_manager=(git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe")
	log_and_exec "Setting Github credential manager" "${_git_credential_manager[@]}"
}

function update_distro() {
	_apt_get_update=(apt-get update -y)
	log_and_exec -su "Updating package index" "${_apt_get_update[@]}"

	_apt_get_dist_upgrade=(apt-get dist-upgrade -y)
	log_and_exec -su "Upgrading packages" "${_apt_get_dist_upgrade[@]}"

	_apt_get_install_basics=(apt-get install git wget curl -y)
	log_and_exec -su "Installing basic packages" "${_apt_get_install_basics[@]}"

	_apt_get_autoremove=(apt-get autoremove)
	log_and_exec -su "Removing unneccessary dependencies" "${_apt_get_autoremove[@]}"
}

function update_shell() {
	_zsh_install=(apt-get install zsh -y)
	log_and_exec -su "Installing ZSH" "${_zsh_install[@]}"

	_oh_my_zsh=(sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended)
	log_and_exec "Installing Oh-My-Zsh" "${_oh_my_zsh[@]}"

	_powerlevel10k=(git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"/themes/powerlevel10k --quiet)
	log_and_exec "Installing Powerlevel10k" "${_powerlevel10k[@]}"

	_copy_zshrc=(sh -c "$(curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.zshrc -o ~/.zshrc)")
	log_and_exec "Copying .zshrc config" "${_copy_zshrc[@]}"

	_copy_p10k=(sh -c "$(curl -fsSL https://raw.githubusercontent.com/trackness/wsl2_deploy/master/.p10k.zsh -o ~/.p10k.zsh)")
	log_and_exec "Copying .p10k.zsh config" "${_copy_p10k[@]}"

	_change_default_shell=(chsh -s /usr/bin/zsh "$USER")
	log_and_exec -su "Changing default shell to ZSH" "${_change_default_shell[@]}"
}

function install_dev_tools() {
	_go_add=(add-apt-repository -y ppa:longsleep/golang-backports)
	log_and_exec -su "Adding custom Go package source" "${_go_add[@]}"
	_go_update=(apt-get -y update)
	log_and_exec -su "Updating Go package index" "${_go_update[@]}"
	_go_install=(apt-get -y install golang-go)
	log_and_exec -su "Installing Go" "${_go_install[@]}"

	_tfswitch_install=(sh -c "$(curl -fsSL https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh)")
	log_and_exec -su "Installing tfswitch" "${_tfswitch_install[@]}"
	# _tfswitch_terraform_0135=(tfswitch 0.13.5)
	# log_and_exec -su "Setting terraform version" "${_tfswitch_terraform_0135[@]}"

	_pyenv_dependencies=(sudo apt-get -y install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl libncurses5-dev xz-utils libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev)
	log_and_exec -su "Installing pyenv dependencies" "${_pyenv_dependencies[@]}"
	_pyenv_path=(export PATH="$HOME"/.pyenv/bin:"$PATH")
	log_and_exec "Temporarily adding pyenv to path" "${_pyenv_path[@]}"
	_pyenv_install=(sh -c "$(curl -fsSL https://pyenv.run)")
	log_and_exec "Installing pyenv" "${_pyenv_install[@]}"
	_pyenv_eval_0=(eval "$(pyenv init -)")
	log_and_exec "Temporarily adding pyenv eval 0" "${_pyenv_eval_0[@]}"
	_pyenv_eval_1=(eval "$(pyenv virtualenv-init -)")
	log_and_exec "Temporarily adding pyenv eval 1" "${_pyenv_eval_1[@]}"
	_pyenv_python_390=(pyenv install 3.9.0)
	log_and_exec "Installing python 3.9.0" "${_pyenv_python_390[@]}"
	_pyenv_set_global=(pyenv global 3.9.0)
	log_and_exec "Setting global python to 3.9.0" "${_pyenv_set_global[@]}"

	_poetry_download=(curl -fsSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -O)
	log_and_exec "Downloading Poetry" "${_poetry_download[@]}"
	_poetry_install=(python get-poetry.py -y)
	log_and_exec "Installing Poetry" "${_poetry_install[@]}"
	_poetry_clean=(mv get-poetry.py "$HOME"/.poetry)
	log_and_exec -q "Moving Poetry install script to ~/.poetry" "${_poetry_clean[@]}"
}

sudo echo "${USER} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/"${USER}" > /dev/null 2>&1

# WSL2 DNS bug workaround: https://github.com/microsoft/WSL/issues/5256#issuecomment-711459592
echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null

git_config
update_distro
update_shell
install_dev_tools

code .

exec zsh
